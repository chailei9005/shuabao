package com.jhlc.km.sb.common;

import android.content.Context;
import android.util.Log;

import com.android.volley.VolleyError;
import com.google.gson.Gson;
import com.jhlc.km.sb.constants.Constants;
import com.jhlc.km.sb.model.BaseModel;
import com.jhlc.km.sb.model.RegistModel;
import com.jhlc.km.sb.model.SModel;
import com.jhlc.km.sb.model.UserModel;
import com.jhlc.km.sb.utils.ServerUtils;
import com.jhlc.km.sb.utils.ToastUtils;
import com.jhlc.km.sb.volley.IRequest;
import com.jhlc.km.sb.volley.RequestJsonListener;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by licheng on 30/3/16.
 */
public class ServerInterfaceHelper {

    private Listenter listenter;
    private Context mContext;

    public ServerInterfaceHelper(Listenter listenter,Context context) {
        this.listenter = listenter;
        this.mContext = context;
    }

    /**
     * 获取验证码
     * @param TAG
     * @param phonenum 手机号码
     */
    public void getServerYzM(final String TAG, String phonenum){
        Map<String,String> requestParams = new HashMap<String, String>();
        requestParams.put("op", Constants.INTERFACE_MSG_CODE);
        requestParams.put("mobile",phonenum);
        IRequest.post(mContext, Constants.SERVER_URL, SModel.class, ServerUtils.getRequestParams(requestParams,TAG), new RequestJsonListener<SModel>() {
            @Override
            public void requestSuccess(SModel result) {
                try {
                    String jsonBody = Des3.decode(result.getS());
                    Log.i(TAG,jsonBody);
                    BaseModel baseModel = new Gson().fromJson(jsonBody,BaseModel.class);
                    if(Constants.STATUS_SUCCESS.equals(baseModel.getStatus())){
                        listenter.success(Constants.INTERFACE_MSG_CODE_SUCCESS);
                    }else if(Constants.STATUS_FAILURE.equals(baseModel.getStatus())){
                        ToastUtils.show(mContext,baseModel.getMessage());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

            @Override
            public void requestError(VolleyError e) {
                ToastUtils.show(mContext,Constants.INTERFACE_QUEST_FAILER);
            }
        });

    }

    /**
     * 用户注册
     * @param TAG
     * @param phonenum 手机号码
     * @param code 验证码
     * @param pwd 密码
     */
    public void ServerRegist(final String TAG,String phonenum, String code, String pwd) {
        Map<String, String> registparams = new HashMap<String, String>();
        registparams.put("op", Constants.INTERFACE_REGIST);
        registparams.put("mobile", phonenum);
        registparams.put("code", code);
        registparams.put("pwd", pwd);
        IRequest.post(mContext, Constants.SERVER_URL, SModel.class, ServerUtils.getRequestParams(registparams, TAG), new RequestJsonListener<SModel>() {
            @Override
            public void requestSuccess(SModel result) {
                try {
                    String jsonBody = Des3.decode(result.getS());
                    Log.i(TAG,jsonBody);
                    RegistModel registModel = new Gson().fromJson(jsonBody,RegistModel.class);
                    if(Constants.STATUS_SUCCESS.equals(registModel.getStatus())){
                        listenter.success(registModel);
                    }else if(Constants.STATUS_FAILURE.equals(registModel.getStatus())){
                        ToastUtils.show(mContext,registModel.getMessage());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void requestError(VolleyError e) {
                ToastUtils.show(mContext,Constants.INTERFACE_QUEST_FAILER);
            }
        });
    }

    /**
     * 用户登录
     * @param TAG
     * @param phonenum 手机号码
     * @param pwd 密码
     */
    public void ServerLogin(final String TAG,String phonenum, String pwd) {
        Map<String, String> loginparams = new HashMap<String, String>();
        loginparams.put("op", Constants.INTERFACE_LOGIN);
        loginparams.put("mobile", phonenum);
        loginparams.put("pwd", pwd);
        IRequest.post(mContext, Constants.SERVER_URL, SModel.class, ServerUtils.getRequestParams(loginparams, TAG), new RequestJsonListener<SModel>() {
            @Override
            public void requestSuccess(SModel result) {
                try {
                    String jsonBody = Des3.decode(result.getS());
                    Log.i(TAG,jsonBody);
                    UserModel userModel = new Gson().fromJson(jsonBody,UserModel.class);
                    if(Constants.STATUS_SUCCESS.equals(userModel.getStatus())){
                        listenter.success(userModel);

                    }else if(Constants.STATUS_FAILURE.equals(userModel.getStatus())){
                        ToastUtils.show(mContext,userModel.getMessage());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void requestError(VolleyError e) {
                ToastUtils.show(mContext,Constants.INTERFACE_QUEST_FAILER);
            }
        });
    }


    /**
     * 修改用户信息
     * @param TAG
     * @param id 用户id
     * @param edittype 编辑项目
     * @param editcontent 编辑内容
     */
    public void updateUserInfo(final String TAG,String id, String edittype,String editcontent) {
        Map<String, String> loginparams = new HashMap<String, String>();
        loginparams.put("op", Constants.INTERFACE_UPDATE_UERINFO);
        loginparams.put("id", id);
        loginparams.put(edittype, editcontent);
        IRequest.post(mContext, Constants.SERVER_URL, SModel.class, ServerUtils.getRequestParams(loginparams, TAG), new RequestJsonListener<SModel>() {
            @Override
            public void requestSuccess(SModel result) {
                try {
                    String jsonBody = Des3.decode(result.getS());
                    Log.i(TAG,jsonBody);
                    BaseModel baseModel = new Gson().fromJson(jsonBody,BaseModel.class);
                    if(Constants.STATUS_SUCCESS.equals(baseModel.getStatus())){
                        listenter.success(baseModel.getStatus());

                    }else if(Constants.STATUS_FAILURE.equals(baseModel.getStatus())){
                        ToastUtils.show(mContext,baseModel.getMessage());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void requestError(VolleyError e) {
                ToastUtils.show(mContext,Constants.INTERFACE_QUEST_FAILER);
            }
        });
    }

    public interface Listenter<T>{
        void success(T object);
        void failure(String status);
    }
}
